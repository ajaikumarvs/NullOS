name: Build NullOS

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Debug filesystem
      run: |
        echo "Current directory: $(pwd)"
        echo "Repository contents:"
        ls -la
        echo "Checking for Makefile:"
        if [ -f "Makefile" ]; then
          echo "Makefile found at repository root"
          cat Makefile
        else
          echo "Makefile not found at repository root"
          find . -name "Makefile" -type f
        fi
        echo "Directory structure:"
        find . -type d | sort
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker environment
      uses: docker/build-push-action@v5
      with:
        context: ./buildenv
        push: false
        load: true
        tags: os-buildenv:latest
        
    - name: Debug Docker container
      run: |
        docker run --rm -v ${{ github.workspace }}:/workspace os-buildenv:latest sh -c "echo 'Container working directory:' && pwd && echo 'Workspace contents:' && ls -la /workspace"
        
    - name: Verify directory structure
      run: |
        # Create directories if they don't exist
        mkdir -p build/x86_64/boot
        mkdir -p dist/x86_64
        mkdir -p targets/x86_64/iso/boot/grub
        
        echo "Current directory structure:"
        find . -type d | sort
        
    - name: Build kernel
      run: |
        # Run make to build the project with explicit Makefile path
        docker run --rm -v ${{ github.workspace }}:/workspace os-buildenv:latest sh -c "cd /workspace && ls -la && make -B" || true
        
        echo "Contents after build attempt:"
        find . -type f -name "*.bin" -o -name "*.iso" | sort
        
        # If make failed, try to compile directly (optional fallback)
        if [ ! -f "dist/x86_64/kernel.bin" ]; then
          echo "Make failed to produce kernel.bin. Checking if source files exist..."
          find . -name "*.asm" | sort
        fi
        
    - name: Capture build artifacts
      run: |
        echo "Looking for build artifacts in all possible locations:"
        find . -type f -name "*.bin" -o -name "*.iso" | sort
        
        # Try to copy any found artifacts to expected locations
        if [ -f "kernel.bin" ] && [ ! -f "dist/x86_64/kernel.bin" ]; then
          mkdir -p dist/x86_64
          cp kernel.bin dist/x86_64/
          echo "Copied kernel.bin to expected location"
        fi
        
        if [ -f "kernel.iso" ] && [ ! -f "dist/x86_64/kernel.iso" ]; then
          mkdir -p dist/x86_64
          cp kernel.iso dist/x86_64/
          echo "Copied kernel.iso to expected location"
        fi
        
        # Check if we have any artifacts now
        if [ -f "dist/x86_64/kernel.bin" ]; then
          echo "Found kernel.bin at expected location"
        else
          echo "Still missing kernel.bin at expected location"
          ls -la dist/x86_64/ || echo "dist/x86_64/ directory doesn't exist or is empty"
        fi
        
    - name: Upload any found artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: build-artifacts
        path: |
          **/kernel.bin
          **/kernel.iso
          **/*.o
          Makefile
          src/**
        if-no-files-found: warn

name: Build NullOS

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ hashFiles('buildenv/Dockerfile') }}
        restore-keys: |
          ${{ runner.os }}-buildx-
          
    - name: Build Docker environment
      uses: docker/build-push-action@v5
      with:
        context: ./buildenv
        push: false
        load: true
        tags: os-buildenv:latest
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
        
    # This is necessary to prevent cache size from growing indefinitely
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache
        
    - name: Cache build artifacts
      uses: actions/cache@v4
      with:
        path: |
          build/
        key: ${{ runner.os }}-build-${{ hashFiles('src/**/*.asm', 'targets/**/*') }}
        restore-keys: |
          ${{ runner.os }}-build-
          
    - name: Build kernel
      run: |
        docker run --rm -v ${{ github.workspace }}:/workspace os-buildenv:latest make clean
        docker run --rm -v ${{ github.workspace }}:/workspace os-buildenv:latest make
        
    - name: Upload kernel binary
      uses: actions/upload-artifact@v4
      with:
        name: kernel-bin
        path: dist/x86_64/kernel.bin
        
    - name: Upload ISO
      uses: actions/upload-artifact@v4
      with:
        name: os-iso
        path: dist/x86_64/kernel.iso
        
    - name: Test kernel build
      run: |
        if [ ! -f dist/x86_64/kernel.bin ]; then
          echo "Kernel binary was not built successfully"
          exit 1
        fi
        if [ ! -f dist/x86_64/kernel.iso ]; then
          echo "Kernel ISO was not built successfully"
          exit 1
        fi
